#!/bin/bash

if [ "$1" == "install" ]; then 
    git config --global mergetool.eneboo.cmd "eneboo-git-mergetool \$BASE \$LOCAL \$REMOTE \$MERGED" || exit 1;
    git config --global mergetool.eneboo.trustExitCode true || exit 1;
    echo "Se ha instalado correctamente el mergetool 'eneboo'"
    exit 0;
fi

if [ "$1" == "replay-kdiff3" ]; then 
    shift

    LOCAL_BRANCH="HEAD^1"
    REMOTE_BRANCH="HEAD^2"
    BASE_BRANCH=$(git merge-base $LOCAL_BRANCH $REMOTE_BRANCH)
    for file in $*; do
        EXT=${file#*.}
        echo $file
        file="$(git rev-parse --show-prefix)$file"

        cd "$(git rev-parse --show-cdup)"
        git show "$BASE_BRANCH:$file" > "$file.BASE.$EXT"
        git show "$LOCAL_BRANCH:$file" > "$file.LOCAL.$EXT"
        git show "$REMOTE_BRANCH:$file" > "$file.REMOTE.$EXT"
        kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" -o "$file" 

        echo
    done
    exit 0;
fi

if [ "$1" == "manual" -o "$1" == "replay" ]; then 
    if [ "$1" == "replay" ]; then 
        LOCAL_BRANCH="HEAD^1"
        REMOTE_BRANCH="HEAD^2"
    else
        shift
        LOCAL_BRANCH=$1
        shift
        REMOTE_BRANCH=$1
    fi
    shift

    BASE_BRANCH=$(git merge-base $LOCAL_BRANCH $REMOTE_BRANCH)
    
    for file in $*; do
        EXT=${file#*.}
        echo $file
        file="$(git rev-parse --show-prefix)$file"
        (
        cd "$(git rev-parse --show-cdup)"
        git show "$BASE_BRANCH:$file" > "$file.BASE.$EXT"
        git show "$LOCAL_BRANCH:$file" > "$file.LOCAL.$EXT"
        git show "$REMOTE_BRANCH:$file" > "$file.REMOTE.$EXT"
        if [ "$1" == "replay" ]; then 
            $0 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" "$file" && {
                test -s "$file" && {
                    mv "$file" "$file.test1"
                    $0 "$file.BASE.$EXT" "$file.REMOTE.$EXT" "$file.LOCAL.$EXT" "$file" 
                    mv "$file" "$file.test2"
                    kdiff3 "$file.test1" "$file.test2"
                    #kdiff3 "$file.LOCAL.$EXT" "$file" "$file.REMOTE.$EXT" >/dev/null 2>&1 &
                    #kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" >/dev/null 2>&1 &
                }
            }
        else # replay-kdiff3
            kdiff3 "$file.BASE.$EXT" "$file.LOCAL.$EXT" "$file.REMOTE.$EXT" -o "$file" 
        fi
        )
        echo
    done
    exit 0;
else
    BASE=$1
    LOCAL=$2
    REMOTE=$3
    MERGED=$4
fi

EXT=${MERGED##*.}
MODE="error"

if [ "$EXT" = "qs" ]; then
    MODE="qsdir"
    MODE="qs-split"
fi

if [ "$EXT" = "ui" ]; then
    MODE="xml"
fi

if [ "$EXT" = "mtd" ]; then
    MODE="xml"
fi

if [ "$EXT" = "xml" ]; then
    MODE="xml"
fi

if [ "$EXT" = "ts" ]; then
    MODE="xml"
fi

if [ "$EXT" = "kut" ]; then
    MODE="xml"
fi

if [ ! -e $BASE ]; then
    exec kdiff3 $LOCAL $REMOTE -o $MERGED --auto
fi

if [ "$EXT" = "qry" ]; then
    MODE="kdiff3"
fi

if [ "$EXT" = "sql" ]; then
    MODE="kdiff3"
fi

if [ "$MODE" = "error" ]; then
    echo "Se desconoce como mezclar la extension '.$EXT'"
    exit 3;
fi

test -e $BASE || { echo "fichero BASE '$BASE' no existe"; exit 2; };
test -e $LOCAL || { echo "fichero LOCAL '$LOCAL' no existe"; exit 2; };
test -e $REMOTE || { echo "fichero REMOTE '$REMOTE' no existe"; exit 2; };

if [ "$MODE" = "kdiff3" ]; then
    exec kdiff3 $BASE $LOCAL $REMOTE -o $MERGED --auto
    exit 3;
fi

if [ "$MODE" = "xml" -o "$MODE" = "qsdir" ]; then
    filename=$(basename "$MERGED")
    extension="${filename##*.}"

    eneboo-mergetool file-diff $MODE $BASE $REMOTE \
        --output $MERGED.patch_br || echo "Error al generar el parche BR"

    eneboo-mergetool file-diff $MODE $BASE $LOCAL \
        --output $MERGED.patch_bl || echo "Error al generar el parche BL"
    
    if [ $(wc -c < $MERGED.patch_br) -ge $(wc -c < $MERGED.patch_bl) ]; then
        PMODE="blr" # (Base - Local) + Remote
        eneboo-mergetool file-diff $MODE $LOCAL  $BASE --output $MERGED.patch_bl_uninst -q --clean-patch \
            || echo "Error al generar desintalación base-local"
        
        eneboo-mergetool file-patch $MODE $MERGED.patch_bl_uninst $REMOTE    --output $MERGED.uninst.$extension -q \
            || echo "Error al aplicar desintalación base-local"
        test -s $MERGED.uninst.$extension || cp $REMOTE $MERGED.uninst.$extension
        eneboo-mergetool file-patch $MODE $MERGED.patch_bl $MERGED.uninst.$extension   --output $MERGED -v \
            || echo "Error al aplicar parche $PMODE"
    else
        PMODE="brl" # (Base - Remote) + Local
        eneboo-mergetool file-diff $MODE $REMOTE  $BASE --output $MERGED.patch_br_uninst -q --clean-patch \
            || echo "Error al generar desintalación base-remote"
        
        eneboo-mergetool file-patch $MODE $MERGED.patch_br_uninst $LOCAL    --output $MERGED.uninst.$extension -q \
            || echo "Error al aplicar desintalación base-remote"
        test -s $MERGED.uninst.$extension || cp $LOCAL $MERGED.uninst.$extension
        eneboo-mergetool file-patch $MODE $MERGED.patch_br $MERGED.uninst.$extension   --output $MERGED -v \
            || echo "Error al aplicar parche $PMODE"
    fi
    
    #exit 8
    
    test -f $MERGED.patch_br_uninst  && unlink $MERGED.patch_br_uninst 
    test -f $MERGED.patch_bl_uninst  && unlink $MERGED.patch_bl_uninst  
    unlink $MERGED.patch_br
    unlink $MERGED.patch_bl
    unlink $MERGED.uninst.$extension
    test -s $MERGED || exit 5 
    exit 0
fi

if [ "$MODE" = "qs-split" ]; then
    eneboo-mergetool qs-split $BASE -v
    eneboo-mergetool qs-split $REMOTE -v
    eneboo-mergetool qs-split $LOCAL -v
    test -d "${MERGED%.qs}-splitted" && rm -Rf "${MERGED%.qs}-splitted"
    mkdir "${MERGED%.qs}-splitted"
    kdiff3 "${BASE%.qs}-splitted" "${LOCAL%.qs}-splitted" "${REMOTE%.qs}-splitted" -o "${MERGED%.qs}-splitted" -m
    eneboo-mergetool qs-join "${MERGED%.qs}-splitted" -v
    if test -s "${MERGED%.qs}.joined.qs" ; then
        cp "${MERGED%.qs}.joined.qs" "$MERGED"
        rm "${MERGED%.qs}.joined.qs" "${BASE%.qs}-splitted" "${LOCAL%.qs}-splitted" "${REMOTE%.qs}-splitted" "${MERGED%.qs}-splitted" -Rf
        exit 0;
    else
        rm "${MERGED%.qs}.joined.qs" "${BASE%.qs}-splitted" "${LOCAL%.qs}-splitted" "${REMOTE%.qs}-splitted" "${MERGED%.qs}-splitted" -Rf
        exit 5;
    fi
fi


echo "Se desconoce el modo de mezla '$MODE'"
exit 3;

